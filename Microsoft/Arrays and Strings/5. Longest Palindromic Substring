5. Longest Palindromic Substring

class Solution {
public:
    string longestPalindrome(string s) {

        //Expand From Centers. T=O(n^2), S=O(1).
        int ans [2] = {0, 0};
        int start = 0;
        int end = 0;

        for (int i=0; i<s.size(); i++){
            int oddLength = expand(i, i, s);
            //If oddLength is the greatest length we have seen so far, update ans.
            if (oddLength > ans[1] - ans[0] + 1){
                int dist = oddLength / 2;
                ans[0] = i - dist;
                ans[1] = i + dist;
            }
            int evenLength = expand(i, i+1, s);
            if (evenLength > ans[1] - ans[0] + 1){
                int dist = evenLength / 2;
                ans[0] = i - dist + 1;
                ans[1] = i + dist;
            }
        }
        int subLength = ans[1] - ans[0] + 1;
        return s.substr(ans[0], subLength); //substr(start i pos, length how many letters after pos)
    }
    /*
Create a helper method expand(i, j) to find the length of the longest palindrome centered at i, j.
1. Set left = i and right = j.
2. While left and right are both in bounds and s[left] == s[right], move the pointers away from each other.
3. The formula for the length of a substring starting at left and ending at right is right - left + 1.
4. However, when the while loop ends, it implies s[left] != s[right]. Therefore, we need to subtract 2. Return right - left - 1. 
*/
    int expand(int i, int j, string s){
        int left = i;
        int right = j;
        while (left >= 0 && right < s.size() && s[left] == s[right]){
            left--;
            right++;
        }
        return right - left - 1; //r - l + 1 -2 as while is false so s[l]!=s[r] so subtract 2.
    }
};
