98. Validate Binary Search Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        //must be only cur left<root<right because all right children > root. 
        //iteration. T=O(N), S=O(N)
        stack<TreeNode*> s; //Stack-LIFO, Queue-FIFO
        TreeNode * node = root, *prev = NULL;
        while(node || !s.empty()){
            while(node){
                s.push(node);
                node = node -> left; 
            }
            node = s.top();
            s.pop();
			
			//This is the additional step.
            if(prev && node->val <= prev->val) return false;
            prev = node;
            node = node->right;
        }
        return true;
/*        TreeNode* min, max;
        stack<TreeNode*> s; 
        s.push(root);
        while (!s.empty()){
            TreeNode* cur = s.top(); //top in stack is the last element
            s.pop(); //remove the last ele
            v.push_back(cur->val);
         //   for (int i=0; i<cur->children.size()-1; i++){
            for (int i=cur->children.size()-1; i>=0; i--){
                s.push(cur->children[i]);
            }
        }
        return v;


/*        //recursion. T=O(N), S=O(N)
        return helper(root, nullptr, nullptr);   
    }
    bool helper(TreeNode* root, TreeNode* min, TreeNode* max){
        //Empty trees are valid BSTs.
        if(!root) return true;
        if((min != nullptr && min->val >= root->val) || (max != nullptr && max->val <= root->val)){
            return false;
        }   
        // verify cur's left sub tree && cur's right sub tree
        //eg: right subtree, min is cur root, max no max limit.
        //eg: left subtree, min no min limit, max is cur root.
        return helper(root->left, min, root) && helper(root->right, root, max);
*/
    }

};
