62. Unique Paths

class Solution {
public:
    int uniquePaths(int m, int n) {


        //dp. Space Optimization. T=O(mn), S=O(n)
        //overwrite the previous row and use the current row as the previous row for next iteration.
        vector<int> dp(n,1); //n elements. they are all 1.
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[j] += dp[j-1];
            }
        }   
        return dp[n-1];

        
/*        //dp. bottom-up. Tabulation. T=O(mn)nested for loop, S=O(mn)2d array       
        //vector<vector<int>> dp(m, vector<int>(n, 1)); = next 3 lines.
        int dp[m][n];
        for (int i=0; i<m; i++){ dp[i][0] = 1;}
        for (int j=0; j<n; j++){ dp[0][j] = 1;}
        
        for (int i=1; i<m; i++){
            for (int j=1; j<n; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
*/
    }
};
