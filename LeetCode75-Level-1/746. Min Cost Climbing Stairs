746. Min Cost Climbing Stairs

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
/*  1. find the maximum or minimum of something.
    2. we have to make decisions that might look different depending on decisions we made previously. 
    These characteristics are typical of a dynamic programming problem. 
    There are 2 main ways to implement a dynamic programming algorithm - top-down & bottom-up.
*/

/*
    //Top-down dp/Recursion/Memoization.
    //minCost as a function represent the min cost to reach ith step instead of array.
*/

    //bottom-up dp/Tabulation. T=O(n) n-1, S=O(n). treat the top floor as the step to reach.
    int minCost[cost.size()+1];
    minCost[0] = minCost[1] = 0;
    for (int i=2; i<=cost.size(); i++){
        minCost[i] = min(minCost[i-1]+cost[i-1], minCost[i-2]+cost[i-2]);
    }
    return minCost[cost.size()];


/*    //bottom-up. T=O(n) cost.size()-1, S=O(1)
    //prev1: min cost to reach[1 step below cur step]. = 0: start from the step with index 0, or the step with index 1. After iteration, prev1 -> cur step. prev2 -> prev1. At last iteration, prev1 > prev2. So leave prev1. treat the top floor as the step to reach.
    int prev1 = 0; 
    int prev2 = 0;
    for (int i=2; i<=cost.size(); i++){
        int temp = prev1;
        prev1 = min(prev1+cost[i-1], prev2+cost[i-2]);
        prev2 = temp;
    }
    return prev1;
*/
    }
};
