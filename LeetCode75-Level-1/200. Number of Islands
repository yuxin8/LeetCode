200. Number of Islands

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        //DFS
        //if find a '1', make all adjacent nodes become '0', then find next '1'. increase counter.
        //special case: dfs时，如果这个位置已经是‘0’,then just return, stop there. 
        // T= O(mn) worst case all '1', S=O(mn) worst case all '1' so dfs goes by mn deep.
        
        int counter = 0;
        for (int i=0; i<grid.size(); i++){
            for (int j=0; j<grid[0].size(); j++){
                if (grid[i][j] == '1'){
                    counter ++;
                    dfs (i, j, grid);
                }
            }
        }
        return counter;

    }
    void dfs (int i, int j, vector<vector<char>>& grid){
        if (i<0 || i>= grid.size() || j<0 || j>=grid[0].size() || grid[i][j]=='0'){
            return;
        }
        grid[i][j]='0';
        dfs (i+1, j, grid);
        dfs (i-1, j, grid);
        dfs (i, j+1, grid);
        dfs (i, j-1, grid);

    }
};
