589. N-ary Tree Preorder Traversal


/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int> preorder(Node* root) {
       
        vector<int> v;
        if (!root){
            return v;
        }
  /*      vector<Node*> s; 
        s.push_back(root);
        while (!s.empty()){
            Node* cur = s.back();
            s.pop_back();
            v.push_back(cur->val);
          //  for (int i=0; i<cur->children.size()-1; i++){
            for (int i=cur->children.size()-1; i>=0; i--){
                s.push_back(cur->children[i]);
            }
        }
   */     
        //iteration. T=O(N), S=O(N) 用了Stack, LIFO
        stack<Node*> s; 
        s.push(root);
        while (!s.empty()){
            Node* cur = s.top(); //top in stack is the last element
            s.pop(); //remove the last ele
            v.push_back(cur->val);
         //   for (int i=0; i<cur->children.size()-1; i++){
            for (int i=cur->children.size()-1; i>=0; i--){
                s.push(cur->children[i]);
            }
        }
        return v;
/*
        //recursion. T=O(N), S=O(N)
        //root->children is a vector
        v.push_back(root->val);
        for (Node* child:root->children){
            vector<int> temp = preorder(child);
            v.insert(v.end(), temp.begin(), temp.end());            
        }
        return v;
*/
    }
};
