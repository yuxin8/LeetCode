235. Lowest Common Ancestor of a Binary Search Tree


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
/*        //recursion. T=O(h)If balanced BST,h=logN.If unbalanced BST,h=N,link list. S=O(h)

    Algorithm:
    1. Start traversing the tree from the root node.
    2. If both the nodes p and q are in the right subtree, then continue the search with right subtree starting step 1.
    3. If both the nodes p and q are in the left subtree, then continue the search with left subtree starting step 1.
    4. If both step 2 and step 3 are not true, this means we have found the node which is common to node p's and q's subtrees.
    and hence we return this common node as the LCA.
       
        if (p->val > root->val && q->val > root->val ){
            return lowestCommonAncestor(root->right, p, q);
        }
        else if (p->val < root->val && q->val < root->val ){
            return lowestCommonAncestor(root->left, p, q);
        }
        else {
            return root;
        }
*/       
        //iteration. T=O(h), S=O(h)
        TreeNode* cur = root;
        while (cur){
            if (p->val > cur->val && q->val > cur->val ){
                cur = cur->right;
            }
            else if (p->val < cur->val && q->val < cur->val ){
                cur = cur->left;
            }
            else {
                return cur;
            }
        }
        return cur;
    }
};
