102. Binary Tree Level Order Traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        //recursion. T=O(N), S=O(N) N nodes in this vector<vector<>> structure
        vector<vector<int>> result;
        if (!root) return result;
        helper(root, 0, result);
        return result;


/*       
        vector<vector<int>> result;
        if (!root) return result;
        //BFS, interation. T=O(N), S=O(N)
        //queue FIFO, stack LIFO
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()){
            int n = q.size();
            vector<int> level;         
            for (int i=0; i<n; i++){
                TreeNode* cur = q.front();
                q.pop();
                level.push_back(cur->val);
                if (cur->left){
                    q.push(cur->left);
                }
                if (cur->right){
                    q.push(cur->right);
                }
            }
            result.push_back(level);
        }
        return result;
*/
    }
    void helper(TreeNode* node, int level, vector<vector<int>> &result){
        if (!node){
            return;
        }
        //if current level completed, then open a new vector for next level.
        //if level = r.size, we have added all nodes to cur level, can create a new level now
        if (level >= result.size()){
            result.push_back({});
        }
        result[level].push_back(node->val);
        helper(node->left, level+1, result);
        helper(node->right, level+1, result);
    }
};
