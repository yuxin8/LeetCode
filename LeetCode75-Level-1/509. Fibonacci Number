509. Fibonacci Number

class Solution {
public:
    int fib(int n) {
        //same as 70
        //Dynamic Programming: linear
        //T=O(n) 1 loop, S=O(n) array size
        int dp[n+2];
        dp[0] = 0;
        dp[1] = 1;
        for (int i=2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];

/*
        //Iterative bottom-up approach. min space. 
        //T=O(N), S=O(1)
        if (n == 0){
            return 0;
        }
        if (n == 1){
            return 1;
        }
        int cur = 0;
        int prev1 = 1;
        int prev0 = 0;
        for (int i=2; i<=n; i++){
            cur = prev1 + prev0;
            prev0 = prev1;
            prev1 = cur;           
        }
        return cur;
*/

/*        //Math. Golden ratio. =(1+sqrt(5))/2.
        //T=O(logN) pow() in C++ takes O(logN) or O(1) time, depending upon compilers or libraries.
        //S=O(1), goldenRatio variable takes constant space.
        float goldenRatio = (1+sqrt(5))/2;
        return (pow(goldenRatio,n) - pow((1-goldenRatio),n))/sqrt(5);
*/
        
/*        //recursion: exponential. T=O(2^N), S=O(N) 2N
        if (n == 0){
            return 0;
        }
        if (n == 1){
            return 1;
        }
        return fib(n-1) + fib(n-2);
*/
    }
};
